attributes.default:

  app:
    # build - static|dynamic
    #   dynamic - volumes are mounted and the build step is run once the containers have started
    #   static  - app is copied into console, built, then the resulting build is copied into the web image
    build: dynamic

    # mode - development|production
    #   development - additional tooling is made available and application is run in development mode
    #   production  - leaner images with less tooling and application is run in production mode
    mode: development

    services: [mysql]
    web_owner: www-data
    web_group: www-data
    web_writable_dirs: []
    web_writable_files: []

  delegated-volumes: no
  docker-sync: no

  jenkins:
    credentials:
      my127ws_key: = @('workspace.name') ~ '-my127ws-key'

  pipeline:
    publish:
      enabled: no
      # branches that should publish (other than change requests and qa)
      # * is deprecated and will be limited to one branch by default in a future release
      branches:
        - '*'
      services: = publishable_services(@('services'))
    preview:
      enabled: no
      namespace: = @('workspace.name') ~ '-' ~ slugify(branch())
      hostname:  = @('pipeline.preview.namespace') ~ '.example.com'
      target_branches:
        - = @('git.default_branch')
    base:
      prometheus:
        podMonitoring: false
      resourcePrefix: ~
      istio:
        gateways:
          - "istio-system/{{ .Release.Namespace }}-gateway"
      services:
        console:
          environment:
            DB_HOST: = @('pipeline.base.resourcePrefix') ~ 'mysql'
            KEYCLOAK_INTERNAL_URL: = 'http://' ~ @('pipeline.base.resourcePrefix') ~ 'keycloak:8080/auth'
        keycloak:
          metricsEnabled: false
          metricsEndpoints: []
          environment:
            DB_ADDR: = @('pipeline.base.resourcePrefix') ~ 'mysql'
    qa:
      enabled: no
      namespace: = @('workspace.name') 
      hostname: = @('pipeline.qa.namespace') ~ '.' ~ @('domain')
      resourcePrefix: ~
      services:
        console:
          environment:
            DB_HOST: = @('pipeline.qa.resourcePrefix') ~ 'mysql'
            KEYCLOAK_INTERNAL_URL: = 'http://' ~ @('pipeline.qa.resourcePrefix') ~ 'keycloak:8080/auth'
        keycloak:
          environment:
            DB_ADDR: = @('pipeline.qa.resourcePrefix') ~ 'mysql'

  docker:
    config: null # deprecated
    # If using gitops helm chart repositories, it's recommended to put this configuration
    # in the values.yml in there now instead of project application repositories
    image_pull_config: = @('docker.config')
    compose:
      file_version: '3.7'
      host_volume_options: "= ':' ~ (@('delegated-volumes') ? 'delegated' : 'cached')"
    registry:
      url: = get_docker_registry(@('docker.repository'))
      username: = @('docker.username') # for backwards compatibility
      password: = @('docker.password') # for backwards compatibility
    repository: = @("workspace.name")
    image:
      console: = 'node:' ~ @('node.version') ~ '-stretch'
      keycloak: = 'jboss/keycloak:' ~ @('keycloak.version')

  backend:
    path: /app/console
    build:
      when: 'true'
      steps:
        - passthru npm install
    install:
      steps: []
    init:
      when: 'true'
      steps:
        - npm run configure
    migrate:
      when: 'true'
      steps:
        - npm run configure

  frontend:
    path: /app
    watch: npm watch
    build:
      when: -f "package.json"
      steps:
        - passthru npm install

  git:
    default_branch: = @('main_branch')
    # potentially deprecated, unless it is repurposed
    main_branch: develop

  helm:
    additional_schema_locations: https://inviqa.github.io/kubernetes-json-schema/schema
    feature:
      # Note: be very careful considering disabling this, as in most cases
      # it causes the secrets in it to be stored plaintext on filesystem
      # or in helm chart repositories
      # requires sealed-secrets k8s operator
      sealed_secrets: true
    timeout: 300

    sealed_secrets:
      # location of the sealed-secret service to download the active certificate from
      controller_name: sealed-secrets
      controller_namespace: sealed-secrets
      # Use local file (or fetch from http url) as the certificate
      # If null, it will be fetched from the controller in the current kubectl context
      certificate_file: ~
      # A namespace the secret should be only decryptable by
      # Ignored if scope is cluster-wide.
      # If null, it will be fetched from the current kubectl context
      namespace: ~
      # The scope under which a secret can be decrypted
      # Either cluster-wide, namespace-wide, or strict
      scope: "= @('helm.sealed_secrets.namespace') ? 'namespace-wide' : 'cluster-wide'"

  nginx:
    conf: []

  node:
    version: 12

  keycloak:
    version: 9.0.0

    external:
      http_port: 80
      https_port: 443

    plugins:
      keycloak-metrics-api: false

  assets:
    remote: ="s3://"~@("aws.bucket")~"/development"
    local: tools/assets/development

  database:
    # possible types are mysql|postgres
    type: mysql
    host: mysql
    port: '3306'
    user: app
    pass: app
    name: app
    root_pass: DV6RdNY3QcFsBk7V

  domain: my127.site
  hostname: = @('namespace') ~ '.' ~ @('domain')

  tls:
    key: |
      -----BEGIN PRIVATE KEY-----
      MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC9q3EMGDtDNKAt
      CHyM1MfWUaIGsv5Zka7pfjIOKL/KvrSIVpZyyJ3lSALeRyyDDRZeYwkbkNdDJgir
      FmD0vJkYifYWfGdIJmbjdm62LGyzDf79Ve8aQF0lLcedMhoCfu7+qciIYnjHdvkx
      Y6Fo9CTZP7m+oSNmUjHdJD3scX4l3vodBK67Hpk+W2eEhwAxG5aFsspDnPi4L9ha
      KlMps+eSn1hLLGYrmthtP2assckvdyL10hS7+OOZFmj5vxGNbQn2F4whiu06JmXL
      oO8T9yd8XNN383FjREYKjrQcyJo3izvawEgrRi9mNKM9DhWuBdbYNe/cSgGfwBK6
      Kc9e8zCLAgMBAAECggEAVL6fOgoxoGuJDdX24G3KBCZhQKEFKDwBbO4nq0/lsc7X
      lvspKYwdkG5Gac5fQwa78dxKG3jx1VzPDrJnC7KgrOgnfhCDjScrXYJzIQ5kWvRr
      9AFLXe1YMN5ti/zwxiC05DA0G0v0LxsnaDvdyKkdNbxVX6lbycH76ZTh3h0vgfeD
      Wc8MMlRTa+ORWKoIZsm+qnNLhWQhhbmoA8LNkZqtJIOBZuyAu8vyXzrEFIhKqVzU
      Jdz0S+xtgYUkoXCTgdYiqoFjlKhaIIV2Fc0vbc68ziIiu3ZtaVch7wNyftoXyjBr
      hjI1GT1dr7NsQpPZ6xtqjGhIvUuVSeCSBZeeXkymAQKBgQDsxFb916gIxl3QQYPV
      NiKPi3rZD5iuMTjy0937dhHWGGYlWW2GEE0XjWrmLUnGyLuxwA5kFgS0eMubbhTg
      aeewHamHeN/pcJIF6HndJbqXLB148E8ux6grpQrHKpTb2RLOPkd6bAgn1SjPllCL
      a/vVanevaJs8U27sKEfGND0aCwKBgQDNE7IzvD1JAUrzqzG9Lxg+NhaHQTQfW45W
      cuHvESiyhc93kdufvcCTrrRRXSZOqDN26+64Ni62O/ulduq4qZmhG/lxqSz5mnpr
      2oV2Kg1C1EUC4V2B9WQoMOhvOa0esTVSm9hC4oX0kYIzl6HbVAUGe8JMXOoKTJkV
      3sAz0FbTgQKBgQC1CX+2wvIiG4NaHO4v1h/hAHajiDBnaQ2xZtzCTMpgmPFpt5Ju
      QwKfcqt9ar2RuKUDyeV3E/ru/7o3k5l06qWUXWnmQz96oG+XAuZDeXjN5JZ4hc8V
      5uYo0R6HoYCHBdlCSA6hhf9Kbcuxxq65nIzH54uyXNrt6qHTAw22ePULdwKBgQCK
      vp+a1ukToldGQfV1zA330Pou6dNMv9Gt9S2cY5yII3W4rKrNCUDn6ZO/VGkdYDjp
      ZTft02KJEk3vpWOqKbxxvo5l8pImEPhwTbhruImeRCSojTaJPS9U7bnjvj68/CFa
      UWvf3IfKbkOLijQMQmzf9Q0AQwBolWgg3sJki7iigQKBgQCf82eve3W/s/pZzKGi
      WWACcZLmDTHeH2AU3ZDfFaEAKObe/cdHMgk8MGewf1IF6QDQXtaxHlM5/FKQ1ohu
      uoe7Xo1R+KlrVRxKAlNQ5lfzhAAgDNaOhpgkH4cehfPrIIh9rwNMSkHDRS0DELvY
      DPyRumPy7zTg5YPzzl7tM1/OPA==
      -----END PRIVATE KEY-----

    crt: |
      -----BEGIN CERTIFICATE-----
      MIIC6zCCAdOgAwIBAgIJAI4syJyPEWAMMA0GCSqGSIb3DQEBBQUAMAwxCjAIBgNV
      BAMMASowHhcNMTgwNzI0MTE1MjQ0WhcNMTkwNzI0MTE1MjQ0WjAMMQowCAYDVQQD
      DAEqMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvatxDBg7QzSgLQh8
      jNTH1lGiBrL+WZGu6X4yDii/yr60iFaWcsid5UgC3kcsgw0WXmMJG5DXQyYIqxZg
      9LyZGIn2FnxnSCZm43Zutixssw3+/VXvGkBdJS3HnTIaAn7u/qnIiGJ4x3b5MWOh
      aPQk2T+5vqEjZlIx3SQ97HF+Jd76HQSuux6ZPltnhIcAMRuWhbLKQ5z4uC/YWipT
      KbPnkp9YSyxmK5rYbT9mrLHJL3ci9dIUu/jjmRZo+b8RjW0J9heMIYrtOiZly6Dv
      E/cnfFzTd/NxY0RGCo60HMiaN4s72sBIK0YvZjSjPQ4VrgXW2DXv3EoBn8ASuinP
      XvMwiwIDAQABo1AwTjAdBgNVHQ4EFgQUK4SXDSeyVYbCWr31rz2K6GLRFoYwHwYD
      VR0jBBgwFoAUK4SXDSeyVYbCWr31rz2K6GLRFoYwDAYDVR0TBAUwAwEB/zANBgkq
      hkiG9w0BAQUFAAOCAQEAjz2PUbdi2S+h4UB3P2UBLdgDClkiSPF+gAqfw4D82faf
      M8hpMuCcd3148dejU4tFPUdLx1MASK8ucCk7rcwVtafWPYU4nMDlmZ9Zj9F2Y8KY
      dVfHfTIOblTSYc90g+nTFsTchkEFOH0nRZAKhCT3HphXNTZFNIQWoqe63SJZ8LTs
      8RBO/zcoh5E31+Rm0WxKlYH4QElLp9dXAtKueWGTafh2E8Re96IS+Uig+yC3RIYJ
      MWLcATwR3lSnqN2ifByic5VGWbRKkGNsh3wAWlejL2FGv8mLU1q8nLK36UcU/HzZ
      ziLtpidJOJHDpyDSAxDSxcP9fJ6gssMQln92DJ/SUQ==
      -----END CERTIFICATE-----
